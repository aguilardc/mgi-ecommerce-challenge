services:
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-network

  orders-db:
    image: postgres:15-alpine
    container_name: orders-db
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: orders_user
      POSTGRES_PASSWORD: orders_pass
      POSTGRES_DB: orders_db
    volumes:
      - orders_db_data:/var/lib/postgresql/data
      - ./order-service/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orders_user -d orders_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-network

  inventory-db:
    image: postgres:15-alpine
    container_name: inventory-db
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: inventory_pass
      POSTGRES_DB: inventory_db
    volumes:
      - inventory_db_data:/var/lib/postgresql/data
      - ./inventory-service/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory_user -d inventory_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-network

  tracking-db:
    image: postgres:15-alpine
    container_name: tracking-db
    ports:
      - "5435:5432"
    environment:
      POSTGRES_USER: tracking_user
      POSTGRES_PASSWORD: tracking_pass
      POSTGRES_DB: tracking_db
    volumes:
      - tracking_db_data:/var/lib/postgresql/data
      - ./tracking-service/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tracking_user -d tracking_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-network

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "3000:3000"
    environment:
      PORT: 3000
      NODE_ENV: development
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "3001:3001"
    environment:
      PORT: 3001
      NODE_ENV: development
      DB_HOST: orders-db
      DB_PORT: 5432
      DB_USER: orders_user
      DB_PASSWORD: orders_pass
      DB_NAME: orders_db
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy
      orders-db:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped

  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    container_name: inventory-service
    ports:
      - "3002:3002"
    environment:
      PORT: 3002
      NODE_ENV: development
      DB_HOST: inventory-db
      DB_PORT: 5432
      DB_USER: inventory_user
      DB_PASSWORD: inventory_pass
      DB_NAME: inventory_db
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy
      inventory-db:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped
#
#  tracking-service:
#    build:
#      context: ./tracking-service
#      dockerfile: Dockerfile
#    container_name: tracking-service
#    ports:
#      - "3003:3003"
#    environment:
#      PORT: 3003
#      NODE_ENV: development
#      DB_HOST: tracking-db
#      DB_PORT: 5432
#      DB_USER: tracking_user
#      DB_PASSWORD: tracking_pass
#      DB_NAME: tracking_db
#      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
#    depends_on:
#      rabbitmq:
#        condition: service_healthy
#      tracking-db:
#        condition: service_healthy
#    networks:
#      - ecommerce-network
#    restart: unless-stopped

volumes:
  rabbitmq_data:
    driver: local
  orders_db_data:
    driver: local
  inventory_db_data:
    driver: local
#  tracking_db_data:
#    driver: local

networks:
  ecommerce-network:
    driver: bridge